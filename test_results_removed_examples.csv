entry_point,formatted_prompt,test_cases,generated_code,all_tests_passed
has_close_elements,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.""""""","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.""""""
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] <= threshold:
            return True
    return False


# Test cases
print(has_close_elements([1, 2, 3, 4, 5], 2.0))  # Output: True
print(has_close_elements([1, 2, 3, 4, 5], 0.5))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 1.5))  # Output: True
print(has_close_elements([1, 2, 3, 4, 5], 1.0))  # Output: True
print(has_close_elements([1, 2, 3, 4, 5], 0.0))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.1))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.01))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.001))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.0001))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.00001))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.000001))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.0000001))  # Output: False
print(has_close_elements([1, 2, 3, 4, 5], 0.00000001))  # Output: False
print",
